Rendering Templates
Redirecting
Form data
GET & POST requests
Session





######################
#
#	SETTING UP AND DEPLOYING VIRTUAL ENVIRONMENTS
#
######################

pip install virtualenv
// install virtual environments

virtualenv venv
// create a new virtual env with the name 'venv'

source <vm-name>/bin/activate
// activate the virtual env called 'venv'

(venv) pip install flask
// once in our virtual env ('venv') we can install Flask

(venv) deactivate
// deactivates flask


(venv) python filename.py
// runs our python file and our flask server (if imported) @ http://localhost:5000

CTRL + C
// quits flask server



######################
#
#	GENERAL NOTES
#
######################

- Routes are essential to any web application and have two parts:
		(1) HTTP Verb( GET, POST, PUT, PATCH, DELETE)
		(2) URL

- We can actually render HTML pages using Flask 
		Use the render_template method()

- We can even reference variables in our HTML that we define in our python:
		- Use {{ insert stuff here }} double curly bracket
  		<p>My name is {{ name }}</p>  // an example of this where 'name' is a var defined in our Python file

- We can run expressions using 
		- Use {% insert stuff %} 
		// single curly bracket here with % signs
		
		// example
		{% for x in range(0, 10) %}:
			# do something
		{% endfor %}  // must end our loop!


- We can place content like .js, .css, and .png, .gif, .jpg into a static folder
		- must create a folder /static in root directory
		- name must be exact, just like /templates folder specifications
		- inside static folder you have the option to sub-organize as follows:
				- /static/css   for CSS
				- /static/js 	for JS
				- /static/img	for IMG

	- How do we access these files?

		- for only /static:

			<!-- linking a css style sheet -->
			<link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='my_style_sheet.css') }}">

			<!-- linking a javascript file -->
			<script type="text/javascript" src="{{ url_for('static', filename='my_script.js') }}"></script>

			<!-- linking an image -->
			<img src="{{ url_for('static', filename='my_img.png') }}">

		- for sub-organization:

			<!-- linking a css style sheet -->
			<link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/my_style_sheet.css') }}">

			<!-- linking a javascript file -->
			<script type="text/javascript" src="{{ url_for('static', filename='js/my_script.js') }}"></script>

			<!-- linking an image -->
			<img src="{{ url_for('static', filename='img/my_img.png') }}">


######################
#
#	RENDER TEMPLATE METHOD 
#
######################

If you're trying to setup Routes to specific HTML pages using Flask, you've got to * make sure of a few things * :


	(1) You import the render_template method at the top of python file:
			
			from flask import Flask, render_template
		
		Note here that Flask and render_template are both imported.


	(2) Your app is defined: you must include this line at the top of your .py file: 
			
			app = Flask(__name__)


	(3) Your <filename>.html file lives in a /templates directory - this folder must be in the root where the app.py file lives


	(4) Your GET request is as follows:

			@app.route('/success') 		# defines our route
				def success():		# runs this function 
				return render_template('success.html')

	(5) app.run(debug=True)	   
	* must go at bottom of document as seems to break anything beneath it *


	(6) new files will be served (from example at step 4) at: 
	http://localhost:5000/success



######################
#
#	HTTP METHODS
#
######################

	-GET
		- can pass insensitive info via form
		- (like a search engine)

	-POST
		- can send data behind the scenes
		- can do this without caching said info



######################
#
#	FORMS
#
######################
	
	- The bread and butter of dynamic content.

	- A huge part of being a developer is learning how to process/handle form inputs.

	- Anatomy of a form:

		<form action='/users' method='post'>
			Name: <input type='text' name='name'>
			Email: <input type='text' name='email'>
			<input type='submit' value='create user'>
		</form>

		
			<form>  
			// allows us to capture everything inside of it (have not done this yet)

			action='/name-of-route-to-send-to'
			// reference the route that you want to target to send info
			// make sure whatever route you choose, you have a URL and a HTTP verb or METHOD defined

			method='<can choose from GET or POST>'
			// remember GET for insensitive info and POST for sensitive info

			<input type='text' name='some-name'>
			// Type can be:
			// 'text'
			// 'radio button'
			// 'password'
			// 'checkbox'
			// 'submit'

			name='some-name'
			// import as recognized by server
			// affects how backend appears

			type='submit'
			// once you hit submit, all this info is sent to whatever /route (URL) and method you defined <form action='/route' method='GET-or-SET'></form>



			###########
			#
			# ACCESSING FORM DATA
			#
			###########

				Access form data with this syntax:

					request.form['name_of_input']

				The name we gave to each HTML input was significant. On the server-side, we can access data that was input into a field from a user through the request.form dictionary by providing the name of the input as the key. 

				We could then store that data:

					my_data = request.form['name_of_input']
				
				Lastly, note that the type of anything that comes in through request.form will be ** "String" **




######################
#
#	COOKIES AND SESSIONS
#
######################

	1. SESSIONS are *server-side* files that contain user information -- Sessions are stored remotely
	
	2. COOKIES are *client-side* files that contain user information  -- Cookies are stored locally
			Only the website that created the cookie can access it.

	* These are just files that contain information *

	3. 3RD-PARTY COOKIES are cookies whom only store unique identifiers which point to data that lives * on the server *. 
			3rd party coookies are used when storing all the data on a local cookie becomes too large

	4. MUST *import* session module!
			from flask import session

	5. app.secret_key = 'ThisIsSecret'
			Session imports must be accompanied by a secret_key as noted in the line above and defined in the top of our py document


	6. Using SESSIONS or COOKIES in our python:
				session['name'] = request.form['name']   # notice how the session['variable'] is used to store these variables
				session['email'] = request.form['email']

	7. Storing sessions in your template:
				Just use the variable as normal but written with the session[] identifier:
				<h3>{{ session['email'] }}</h3>

