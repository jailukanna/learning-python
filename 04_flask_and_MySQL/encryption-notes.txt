##########
#
# KEEP HACKERS AWAY
#
##########

	+ Encrypt data to keep hackers from getting passwords.
	+ Encrypt data *before* it is put into the database.
	+ This is done by using an algorithm to mask its original value.


##########
#
# md5 ENCRYPTION - safe for small projects only - SETUP AND VALIDATION
#
##########

	+ md5 encryption takes an input and returns an encrypted string
	+ use 'import md5' in python to initiate
	+ example

	-----python-----
	import md5 # imports the md5 module to generate a hash
	password = 'password';
	# encrypt the password we provided as 32 character string
	encrypted_password = md5.new(password).hexdigest(); 
	print encrypted_password; #this will show you the encrypted value
	# 5f4dcc3b5aa765d61d8327deb882cf99 -> nice!
	---end python---

	+ although md5 is not industry standard, it is hard to crack
	+ the best way to use md5 is have your incoming password directly encrypted and this value directly is entered into the database


	-----python-----
	import md5 # do this at the top of your file where you import modules
	@app.route('/users/create', methods=['POST'])
	def create_user():
	     username = request.form['username']
	     email = request.form['email']
	     # password var stores encrypted password from user input
	     password = md5.new(request.form['password']).hexdigest(); 
	     insert_query = "INSERT INTO users (username, email, password, created_at, updated_at) VALUES (:username, 
	     :email, :password, NOW(), NOW())"
	     query_data = { 'username': username, 'email': email, 'password': password }
	     mysql.query_db(insert_query, query_data)
	---end python---

	+ here's how we can then check the password and username when the user logs in
	+ note that the md5 conversion is not random, and the same string generates the same hash
	+ what's happening above is the user input 'password' field is turned into a hash key
	+ this is stored as 'password' variable in python
	+ this 'password' value is then stored in the DB (the hash key, not the original string)
	+ what's happening below is that 'password' variable is being generated by taking an md5 conversion for the user input field 'password' (this will be the same hash key as was originally generated when the user registered)
	+ the user email and the hash key are then used to find the needed record:

	----python----
	password = md5.new(request.form['password']).hexdigest()
	email = request.form['email']
	user_query = "SELECT * FROM users where users.email = :email AND users.password = :password"
	query_data = { 'email': email, 'password': password}
	user = mysql.query_db(user_query, query_data)
	# do the necessary logic to login if the user exists, otherwise redirect to login page with error message<br>
	---end python---


##########
#
# SALTED ENCRYPTION - needed for enterprise level applications
#
##########

	+ md5 generates the same hash key for the same string, no matter what
	+ we need something more random for bigger or more important applications
	+ salted encrpytion generates a 'salt' which is a unique key added to a hash
	+ see the example below for how a salt is used with md5 encrpytion

	-----code example-----
	salt = '123' # salt here would be a random number instead
	encrypted_password = md5(password . '' . salt);
	---end code example---

	+ in the code example above, the salt key is added onto the hash key
	+ the salts are added using concatenation
	+ the word 'salt' comes from the fact these numbers are sprinkled (like a spice) on top of our primary ingredient (the md5 encrpytion) creating a more savory encryption method

	##########
	#
	# GENERATING SALTS IN PYTHON
	#
	##########

		+ here's two different functions that create a random string

		-----python-----
		import os, binascii # include this at the top of your file
		salt = binascii.b2a_hex(os.urandom(15))
		---end python---

		+ The function called os.urandom() returns a string of bytes. 
		+ The number of bytes is equal to the parameter provided. (ie, 15)
		+ This string isn't a normal alphanumeric string, so we turn it into a string using the function b2a_hex(), which will turn the value returned from the openSSL function into a normal alphanumeric string. 
		+ This new random string will be our salt. 
		+ The idea is to store this salt during the registration process.

	##########
	#
	# ADDING SALTS TO md5 - SETUP AND VALIDATION
	#
	##########

		+ we want to store the salts in our table as a value of its own
		+ here's how we can generate the salt, md5 encrpytion, concatenate them and store them each in our database:

		-----python-----
		username = request.form['username']
		email = request.form['email']
		password = request.form['password']
		salt =  binascii.b2a_hex(os.urandom(15))
		# next we join our salt and md5
		encrypted_pw = md5.new(password + salt).hexdigest()  
		# you'll see our salt value and encrypted pw are each stored separately in table
		insert_query = "INSERT INTO users (username, email, password, salt, created_at, updated_at) VALUES (:username, :email, :encrypted_pw, :salt, NOW(), NOW())"
		query_data = { 'username': username, 'email': email, 'encrypted_pw': encrypted_pw, 'salt': salt}
		mysql.query_db(insert_query, query_data)
		---end python---

		+ now when the user logs in, we want to make sure the salt and password match up, so we use the following code:

		-----python-----
		email = request.form['email']
		password = request.form['password']
		user_query = "SELECT * FROM users WHERE users.email = :email LIMIT 1"
		query_data = {'email': email}
		user = mysql.query_db(user_query, query_data)
		if user[0]:
			encrypted_password = md5.new(password + user[0]['salt']).hexdigest();
			if user[0]['password'] == encrypted_password:
		 		# this means we have a successful login!
		 	else:
		     	# invalid password!
		else:
		  	# invalid email!
		---end python---

##########
#
# BCrypt - 
#
##########

	+ BCrypt is a powerful module to encrpyt passwords in a secure way
	+ install BCrypt by entering the following in terminal:
		pip install flask-bcrypt
	+ not only do we have to install bcrypt, but we have to call it appropriately in our app
	+ call BCrypt in your application by typing the following:

	-----python-----
	from flask import Flask, request, render_template
	from mysqlconnection import MySQLConnector
	# imports the Bcrypt module
	from flask.ext.bcrypt import Bcrypt
	app = Flask(__name__)
	bcrypt = Bcrypt(app)
	mysql = MySQLConnector(app, 'my_database_here')
	# this will load a page that has 2 forms one for registration and login
	@app.route('/', methods=['GET'])
	def index():
	 return render_template('index.html')
	# we are going to add functions to create new users and login users
	---end python---

	
	##########
	#
	# generate_password_hash CREATION
	#
	##########

		+ we can use a handy password hash generator that's built into Bcrypt
		+ this generator can make us a hash key out of our user password
		+ see the following example of how a user password (request.form['password']) is converted to a hash:

			-----python-----
			@app.route('/create_user', methods=['POST'])
			def create_user():
				email = request.form['email']
				username = request.form['username']
				password = request.form['password']
				# run validations and if they are successful we can create the password hash with bcrypt
				pw_hash = bcrypt.generate_password_hash(password)
				# now we insert the new user into the database
				insert_query = "INSERT INTO users (email, username, pw_hash, created_at) VALUES (:email, :username, :pw_hash, NOW())"
				query_data = { 'email': email, 'username': username, 'pw_hash': pw_hash }
				mysql.query_db(insert_query, query_data)
				# redirect to success page
			---end python---

		+ you can see above that the value for 'password' is used as the argument for the bcrypt password hash generation


	##########
	#
	# check_password_hash (generate_password_hash VALIDATION)
	#
	##########

		+ the check_password_hash returns 'True' if hashed values of password at login is equal to password hash in database
		+ if not the same, will return 'False'
		+ here's an example of check_password_hash 

			-----python-----
			password = 'password'
			pw_hash = bcrypt.generate_password_hash(password)
			test_password_1 = 'thisiswrong'
			bcrypt.check_password_hash(pw_hash, test_password_1) # this will return false
			test_password_2 = 'password'
			bcrypt.check_password_hash(pw_hash, test_password_2) # this will return true
			---end python---


		+ bcrypt.check_password_hash(password1, password2)
		+ in the example above, if password1 and password2 match, 'True' is returned
		+ otherwise, 'False' is returned
		+ here's a way we can use this to check our user's password using python

			-----python------
			@app.route('/login', methods=['POST'])
			def login():
				email = request.form['email']
				password = request.form['password']
				user_query = "SELECT * FROM users WHERE email = :email LIMIT 1"
				query_data = { 'email': email }
				user = mysql.query_db(user_query, query_data) # user will be returned in a list
				if bcrypt.check_password_hash(user[0]['pw_hash'], password):
			  		# login user
				else:
			  		# set flash error message and redirect to login page
			---end python---

		+ *VERY IMPORTANT* when creating your column in your table (ie, 'pw_hash'), make sure you set the type to VARCHAR(255) -- the hash keys generated can be long and if this data type is not used you won't be able to store it and could lead to errors or problems
		+ *VERY IMPORTANT* never store any clear-text or human-readable password data for users! Always encrypt!

