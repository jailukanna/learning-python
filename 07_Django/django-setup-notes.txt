////////////////////////////
//
//	HOW TO CREATE YOUR DJANGO PROJECT IN 10 EASY STEPS:
//
///////////////////////////
// 
// Coding Dojo, September 2016, Tim Knab
//
/////////////////



$$$$$$$$$$ STEP 1
////////////////////////////
//
//	START YOUR VIRTUAL ENV AND GOTO THE FOLDER WHERE YOU WANT YOUR PROJECT TO BE CREATED:
//
///////////////////////////

// start your virtual env with django

// navigate to where you want to create your new project and do the following:

django-admin startproject projectname
// this creates a new project with the folder name 'projectname' -- change this to whatever you'd like your project to be
// when this folder is created, some default django files will automatically be added and a subfolder with the same name will be created






$$$$$$$$$$ STEP 2
////////////////////////////
//
//	CREATE YOUR APPS FOLDER AND ADD __INIT__.PY SO IT'S RECOGNIZED:
//
///////////////////////////


cd projectname
// navigate into your project folder (note, 'projectname' refers to the name you you created)

mkdir apps
// make a folder called /apps inside of /projectname

cd apps
// go into apps

touch __init__.py
//create a blank __init__.py file in /apps:






$$$$$$$$$$ STEP 3
////////////////////////////
//
//	UNPACK YOUR APPLICATION FILES INTO YOUR APP/FIRST_APP FOLDER:
//
///////////////////////////

// make sure you're inside of your /apps folder and type:

python ../manage.py startapp first_app
// first_app folder is created inside of /apps and python files are added
// can name 'first_app' whatever you want -- maybe a short hand of projectname
// currently no routes are setup, etc, but your server should run

// you can run your server and check if you want










$$$$$$$$$$ STEP 4
////////////////////////////
//
//	CONFIGURE PROJECTNAME/PROJECTNAME/SETTINGS.PY FILE TO HOOK UP YOUR APP:
//
///////////////////////////

// navigate to projectname/projectname/settings.py
// in settings.py, we need to add our app to the list of applications so its hooked in 

vi settings.py
// will open settings.py

// edit the file as follows:

Add 'apps.first_app' to our INSTALLED_APPS list:

  # Inside projectname/settings.py
   INSTALLED_APPS = [
       'apps.first_app', ### added this line! MAKE SURE TO INCLUDE COMMA AFTER OR APP WON'T WORK
       'django.contrib.admin',
       'django.contrib.auth',
       'django.contrib.contenttypes',
       'django.contrib.sessions',
       'django.contrib.messages',
       'django.contrib.staticfiles',
   ]

// once edits are complete, hit esc to exit insert mode and then type :wq to save and exit (or type shift+z+z from command mode)

// goto /projectname and run python manage.py runserver from the terminal. 
// load up http://localhost:8000. 
// you should see a welcome message
// good to test server just in case -- can run migrations now too if using session or any needed components









$$$$$$$$$$ STEP 5
////////////////////////////
//
//	CREATE YOUR TEMPLATES FOLDER AND STATIC FOLDER
//
///////////////////////////


// navigate to apps/first_project

mkdir templates
// creates apps/first_project/templates directory

mkdir static
// creates apps/first_project/static directory

cd templates
mkdir first_project
// creates directory apps/first_project/templates/first_project/
// note that 'first_project' folder name must match /apps subfolder name

cd first_project
touch index.html
// creates an empty index.html file inside of /first_project

cd ..
cd ..
cd static
// brings you back to /first_project and then into /static

mkdir first_project
// creates directory apps/first_project/static/first_project

cd first_project
mkdir images
mkdir js
mkdir css
// creates sub-directories for static files, delete later if these folders are not used










$$$$$$$$$$ STEP 6
////////////////////////////
//
//	CREATE A BLANK URLS.PY FILE IN PROJECTNAME/APPS/FIRST_PROJECT
//
///////////////////////////

// navigate to projectname/apps/first_project

ls
// confirm urls.py does not exist

touch urls.py
// create an empty urls.py file which we'll add to later

cd ..
cd ..
subl .
// will bring you back to /projectname and launch sublime with all subfiles loaded 
// edit the steps below using sublime







$$$$$$$$$$ STEP 7
////////////////////////////
//
//	EDIT YOUR PROJECTNAME/PROJECTNAME/URLS.PY FILE
//
///////////////////////////

// Open projectname/projectname/urls.py in your text editor 
// We need to point it to get the routes from apps/first_app:
// Update the file, so it looks like this:

from django.conf.urls import url, include
urlpatterns = [
  url(r'^', include('apps.first_app.urls'))
]

# Notice we added include
# We use include to pull in our 'apps.first_app.urls' file - make sure you enter this in a string format
# We removed any references to the django admin
# Notice the regex pattern r'^' contains NO $ symbol

// After editing save and select all
// Copy the entire contents of the file for the next step!








$$$$$$$$$$ STEP 8
////////////////////////////
//
//	CONFIGURE PROJECTNAME/APPS/FIRST_PROJECT/URLS.PY FILE
//
///////////////////////////


// Open projectname/apps/first_app/urls.py
// Paste in the contents of your projectname/projectname/urls.py
// Edit the file as follows:
1. remove include from the import statement
2. add the line: 
		from . import views 
   beneath the import statement to import projectname/apps/first_project/views.py
   (this is where we'll put our routes)
3. change urlspattern as follows:

urlpatterns = [
    url(r'^$', views.index),
]

# make sure to include the $ in your regex pattern
# notice that views.index points to the index method in your views.py file
# we'll have to create that index method in views.py or nothing will work
# note, you don't have to use '.index', you can use another '.name', but make sure 
# the '.name' method is properly defined in your apps/first_project/views.py file






$$$$$$$$$$ STEP 9
////////////////////////////
//
//	CREATE YOUR VIEWS
//
///////////////////////////

// Open projectname/apps/first_project/views.py file
// Creating your views
// The first view you'll want to create will be to handle your index method:
// The following index method will render the templates/first_project/index.html page as follows:

def index(request):
	return render(request, 'first_project/index.html')

# be sure to open your index.html file and add some content.
# note, if index(request) is not defined, the 'views.index' in /apps/first_project/urls.py won't point to anything.
# note, make sure your method name matches the name you used in your urls.py file






$$$$$$$$$$ STEP 10
////////////////////////////
//
//	LAUNCH
//
///////////////////////////

// Once your index(request) method has been properly defined,
// restart your server and your templates/apps/first_project/index.html page should load (or whatever page you defined in your method)








